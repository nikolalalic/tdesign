import { IssueTypeLabel } from '../interface';

function createComment(type: string) {
  const comment = '<!-- generated by issue-helper DO NOT REMOVE -->';
  return comment.replace('-->', IssueTypeLabel[type] + ' -->');
}

function creatIssue(isBugRef, formDataRef, contentTextRef) {
  return isBugRef.value
    ? `### ${contentTextRef.value.reproduceLabel}
${formDataRef.value.reproduce}

### ${contentTextRef.value.stepsLabel}
${formDataRef.value.steps}

### ${contentTextRef.value.expectLabel}
${formDataRef.value.expected}

### ${contentTextRef.value.actualLabel}
${formDataRef.value.actual}
${
  formDataRef.value.remarks
    ? `
### ${contentTextRef.value.remarksLabel}
${formDataRef.value.remarks}
`
    : ``
}
| Environment | Info |
|---|---|
| ${contentTextRef.value.versionRepositoryLabel} | ${
        formDataRef.value.versionRepository || '-'
      } |
| ${contentTextRef.value.versionStructureLabel} | ${
        formDataRef.value.versionStructure
      } |
| ${contentTextRef.value.versionSystemLabel} | ${
        formDataRef.value.versionSystem
      } |
| ${contentTextRef.value.versionNodeLabel} | ${formDataRef.value.versionNode} |
`.trim()
    : `### ${contentTextRef.value.functionContentLabel}
${formDataRef.value.functionContent}

### ${contentTextRef.value.functionalExpectationsLabel}
${formDataRef.value.functionalExpectations}`.trim();
}

export function create(isBugRef, formDataRef, contentTextRef) {
  const issueString = `${createComment(formDataRef.value.type)}\n\n${creatIssue(
    isBugRef,
    formDataRef,
    contentTextRef
  )}\n\n${createComment(formDataRef.value.type)}`;
  const issueUriComponent = encodeURIComponent(issueString).replace(
    /%2B/gi,
    '+'
  );
  window.open(
    `https://github.com/${formDataRef.value.repo}/issues/new?title=${formDataRef.value.title}&body=${issueUriComponent}`
  );
}
